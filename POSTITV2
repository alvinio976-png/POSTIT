<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <title>POSTIT — Tracker de publications</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
  <link rel="apple-touch-icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='512' height='512'><rect width='512' height='512' fill='%23000'/><text x='50%' y='56%' font-size='260' text-anchor='middle' fill='%23fff' font-family='Arial'>P</text></svg>">

  <!-- Chart.js CDN (léger et fiable) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>

  <style>
    :root{
      --bg: rgba(10,10,14,0.65);
      --card: rgba(15,15,20,0.55);
      --stroke: rgba(255,255,255,0.08);
      --txt: #f4f6fb;
      --muted:#aab3c0;
      --accent:#7cf3ff;
      --green:#19e28a;
      --orange:#ffb020;
      --red:#ff4d6d;
      --blur: 12px;
      --radius: 20px;
    }
    *{box-sizing:border-box;-webkit-tap-highlight-color: transparent;}
    html,body{height:100%;margin:0;color:var(--txt);font-family: -apple-system,BlinkMacSystemFont, "SF Pro Text", Inter, Roboto, Arial, sans-serif; background:#05060a;}
    /* Background vidéo/GIF */
    #bgWrap{position:fixed;inset:0;z-index:-2;overflow:hidden;}
    #bgVideo,#bgImage{position:absolute;inset:0;width:100%;height:100%;object-fit:cover;filter:brightness(0.5) saturate(1.2);}
    #glass{position:fixed;inset:0;background: radial-gradient(1200px 800px at 100% 0%, rgba(124,243,255,0.15), transparent 60%), linear-gradient( to bottom, rgba(0,0,0,0.55), rgba(0,0,0,0.70)); backdrop-filter: blur(var(--blur)); z-index:-1;}

    header{position:sticky;top:0;padding: max(12px, env(safe-area-inset-top)) 14px 10px; display:flex;align-items:center;gap:10px;background: linear-gradient(to bottom, rgba(5,6,10,0.7), rgba(5,6,10,0)); border-bottom:1px solid var(--stroke); backdrop-filter: blur(8px);}
    .brand{font-weight:800;letter-spacing:0.5px;font-size:20px;}
    .pill{margin-left:auto;display:flex;align-items:center;gap:8px;padding:8px 12px;border:1px solid var(--stroke);border-radius:999px;background:var(--card);}
    .dot{width:10px;height:10px;border-radius:999px;background:var(--green);}
    .pill.red .dot{background:var(--red);}
    .pill.orange .dot{background:var(--orange);}

    main{padding:16px; padding-bottom: calc(20px + env(safe-area-inset-bottom)); display:grid; gap:14px; max-width:760px; margin:0 auto;}
    .card{background:var(--card); border:1px solid var(--stroke); border-radius: var(--radius); padding:14px; box-shadow: 0 8px 30px rgba(0,0,0,0.25);}
    .card h3{margin:0 0 10px;font-size:16px;font-weight:700;}
    .row{display:flex; gap:10px; align-items:center; flex-wrap:wrap;}
    label{font-size:12px;color:var(--muted); display:block; margin:6px 0;}
    input,select,button,textarea{
      width:100%; padding:14px 12px; border-radius:14px; border:1px solid var(--stroke); background:rgba(255,255,255,0.05);
      color:var(--txt); font-size:15px; outline:none;
    }
    button{font-weight:700; letter-spacing:0.3px; background:linear-gradient(135deg, #00e1ff33, #00ffa033); border-color:#00e1ff55;}
    button:active{transform:translateY(1px);}
    .btn-ghost{background:transparent;border-color:var(--stroke);}
    .two{display:grid; grid-template-columns:1fr 1fr; gap:10px;}
    canvas{width:100%; height:260px;}
    .mini{font-size:12px;color:var(--muted);}
    .badge{display:inline-flex;align-items:center;gap:6px;padding:6px 10px;border-radius:999px;border:1px solid var(--stroke); background:rgba(255,255,255,0.04);}
    .badge .bDot{width:8px;height:8px;border-radius:999px;}
    .b-green{background:var(--green)} .b-orange{background:var(--orange)} .b-red{background:var(--red)}
    .insight{display:flex; justify-content:space-between; gap:8px; padding:10px 0; border-top:1px dashed var(--stroke);}
    .insight:first-child{border-top:0}
    .toast{position:fixed; left:50%; bottom:calc(20px + env(safe-area-inset-bottom)); transform:translateX(-50%); background:#0b0f14; border:1px solid var(--stroke); padding:12px 14px; border-radius:14px; box-shadow: 0 10px 30px rgba(0,0,0,0.35); display:none; z-index:5;}
    .switch{display:flex;align-items:center;gap:10px}
    .switch input{width:auto}
    .days{display:flex; gap:6px; flex-wrap:wrap}
    .day{padding:8px 10px;border:1px solid var(--stroke); border-radius:12px; background:rgba(255,255,255,0.03); font-size:13px}
    .day.active{outline:2px solid #00f0ff66}

    /* Mobile first refinements */
    @media(min-width:720px){
      canvas{height:220px;}
    }

    /* Hide iOS input spinner */
    input[type=number]::-webkit-outer-spin-button, input[type=number]::-webkit-inner-spin-button{ -webkit-appearance: none; margin: 0; }
  </style>
</head>
<body>
  <div id="bgWrap">
    <video id="bgVideo" autoplay muted playsinline loop></video>
    <img id="bgImage" alt="" style="display:none"/>
  </div>
  <div id="glass"></div>

  <header>
    <div class="brand">POSTIT</div>
    <div id="statusPill" class="pill"><span class="dot"></span><span id="pillText">On track</span></div>
  </header>

  <main>
    <!-- Quick Add -->
    <section class="card">
      <h3>Ajouter une publication</h3>
      <div class="row">
        <div class="two">
          <div>
            <label>Plateforme</label>
            <select id="platform">
              <option>YouTube</option>
              <option>TikTok</option>
              <option>Instagram</option>
              <option>YouTube Shorts</option>
              <option>IG Reels</option>
              <option>Facebook</option>
              <option>Autre</option>
            </select>
          </div>
          <div>
            <label>Date & heure</label>
            <input id="datetime" type="datetime-local">
          </div>
        </div>
        <div style="width:100%">
          <label>Titre (optionnel)</label>
          <input id="title" placeholder="Ex: Vlog Tokyo #12" />
        </div>
        <div class="two">
          <div>
            <label>Objectif mensuel (# posts)</label>
            <input id="monthlyTarget" type="number" min="1" step="1" placeholder="Ex: 20">
          </div>
          <div>
            <label>&nbsp;</label>
            <button id="btnAdd">Enregistrer la publication</button>
          </div>
        </div>
      </div>
      <div class="mini">Astuce: définis un objectif (ex: 20/mois). Le statut passera en <span class="badge"><span class="bDot b-green"></span>VERT</span> si l’objectif est atteint, <span class="badge"><span class="bDot b-orange"></span>ORANGE</span> si proche (≥75%), <span class="badge"><span class="bDot b-red"></span>ROUGE</span> sinon.</div>
    </section>

    <!-- Progress -->
    <section class="card">
      <h3>Progression — <span id="monthLabel"></span></h3>
      <div class="two">
        <div>
          <canvas id="ringChart"></canvas>
          <div class="mini" id="ringText" style="text-align:center;margin-top:6px;"></div>
        </div>
        <div>
          <canvas id="monthBar"></canvas>
        </div>
      </div>
    </section>

    <section class="card">
      <h3>Année <span id="yearLabel"></span></h3>
      <canvas id="yearBar"></canvas>
    </section>

    <!-- Insights -->
    <section class="card">
      <h3>Vos insights</h3>
      <div class="insight"><div>Dernière publication</div><div id="lastPost">—</div></div>
      <div class="insight"><div>Streak (jours consécutifs)</div><div id="streak">0</div></div>
      <div class="insight"><div>À faire pour l’objectif</div><div id="toGoal">—</div></div>
      <div class="insight"><div>Meilleurs créneaux</div><div id="bestSlots">—</div></div>
      <div class="insight"><div>Conseil</div><div id="advice">—</div></div>
    </section>

    <!-- Notifications & Rappels -->
    <section class="card">
      <h3>Rappels & notifications</h3>
      <div class="row">
        <div class="switch">
          <button id="btnNotif">Autoriser les notifications</button>
          <span class="mini" id="notifState">Permission inconnue</span>
        </div>
        <div class="two" style="margin-top:8px">
          <div>
            <label>Heure quotidienne</label>
            <input id="reminderTime" type="time" value="19:00">
          </div>
          <div>
            <label>&nbsp;</label>
            <button id="btnSaveReminder">Enregistrer le rappel</button>
          </div>
        </div>
        <div class="days" id="days"></div>
        <div class="mini">Remarque iOS: les notifications locales fonctionnent quand l’app est ouverte (ou ajoutée à l’écran d’accueil). Pas de push serveur ici.</div>
      </div>
    </section>

    <!-- Données -->
    <section class="card">
      <h3>Données</h3>
      <div class="two">
        <button id="btnExport" class="btn-ghost">Exporter JSON</button>
        <label class="btn-ghost" style="display:flex;align-items:center;justify-content:center;gap:8px;cursor:pointer">
          <input id="importFile" type="file" accept="application/json" style="display:none">
          Importer JSON
        </label>
      </div>
    </section>
  </main>

  <div class="toast" id="toast"></div>

  <script>
  // ----------------- CONFIG -----------------
  const GIPHY_KEY = "uSWzkyG4P3SWLfM2cDpYEh5J4M4cIWB9";
  const GIPHY_ID  = "MwUPdnmcZOWCA"; // Studio Ghibli food gif (fourni)
  const LS_KEY = "postit_data_v1";

  // ----------------- STATE ------------------
  const state = {
    posts: [], // {ts:number, platform:string, title?:string}
    settings: {
      monthlyTarget: 20,
      reminderTime: "19:00",
      reminderDays: [1,2,3,4,5], // Lun-Ven
      notifGranted: false
    },
    charts: { ring:null, monthBar:null, yearBar:null }
  };

  // ----------------- UTIL -------------------
  const $ = sel => document.querySelector(sel);
  const formatDate = (d)=>{
    const dd = new Date(d);
    if(isNaN(dd)) return "—";
    return dd.toLocaleString([], {year:'numeric', month:'short', day:'numeric', hour:'2-digit', minute:'2-digit'});
  };
  const todayLocalISO = ()=>{
    const now = new Date();
    const off = now.getTimezoneOffset();
    const local = new Date(now - off*60*1000);
    return local.toISOString().slice(0,16); // yyyy-MM-ddTHH:mm
  };
  const toast = (msg)=>{ const t=$("#toast"); t.textContent=msg; t.style.display='block'; setTimeout(()=>t.style.display='none',1800); };

  function save(){
    localStorage.setItem(LS_KEY, JSON.stringify({posts:state.posts, settings:state.settings}));
  }
  function load(){
    const raw = localStorage.getItem(LS_KEY);
    if(!raw) return;
    try{
      const d = JSON.parse(raw);
      if(Array.isArray(d.posts)) state.posts = d.posts;
      if(d.settings) state.settings = Object.assign(state.settings, d.settings);
    }catch(e){}
  }

  // ----------- GIPHY BG -----------
  async function loadGiphyBG(){
    try{
      const url = `https://api.giphy.com/v1/gifs/${GIPHY_ID}?api_key=${GIPHY_KEY}`;
      const res = await fetch(url);
      const data = await res.json();
      const images = data?.data?.images;
      const mp4 = images?.original?.mp4 || images?.downsized_small?.mp4;
      const gif = images?.downsized_large?.url || images?.original?.url;
      const v = $("#bgVideo");
      const img = $("#bgImage");
      if(mp4){
        v.src = mp4; v.style.display='block'; img.style.display='none';
      }else{
        img.src = gif; img.style.display='block'; v.style.display='none';
      }
    }catch(e){
      // silent fail
    }
  }

  // --------- STATS + CHARTS ---------
  function startOfDay(t){ const d=new Date(t); d.setHours(0,0,0,0); return d.getTime(); }
  function isSameDay(a,b){ const da=new Date(a), db=new Date(b); return da.getFullYear()===db.getFullYear() && da.getMonth()===db.getMonth() && da.getDate()===db.getDate(); }

  function computeStats(){
    const now = new Date();
    const y= now.getFullYear(), m= now.getMonth();
    const first = new Date(y,m,1);
    const last  = new Date(y,m+1,0);
    const daysInMonth = last.getDate();

    // month daily counts
    const daily = new Array(daysInMonth).fill(0);
    // year monthly counts
    const monthly = new Array(12).fill(0);

    let lastTs = null;
    let streak = 0;
    const byDaySet = new Set();

    const wday = new Array(7).fill(0);  // histogram jours (0=dim)
    const hour = new Array(24).fill(0); // histogram heures

    state.posts.forEach(p=>{
      const d = new Date(p.ts);
      const yy = d.getFullYear(), mm=d.getMonth(), dd=d.getDate();
      monthly[mm]++;

      if(yy===y && mm===m) daily[dd-1]++;

      const wd = d.getDay(); wday[wd]++; hour[d.getHours()]++;

      if (!lastTs || startOfDay(p.ts) > startOfDay(lastTs)) lastTs = p.ts;
    });

    // streak: compter les jours consécutifs en partant d’aujourd’hui vers le passé
    let cur = new Date(); cur.setHours(0,0,0,0);
    while(true){
      const found = state.posts.some(p=> isSameDay(p.ts, cur.getTime()));
      if(found){ streak++; cur = new Date(cur.getTime() - 86400000); }
      else break;
    }

    return {daily, monthly, daysInMonth, lastTs, streak, wday, hour};
  }

  function colorForProgress(p){
    if(p >= 1) return {cls:'', pill:'On track', dot:'green'};
    if(p >= 0.75) return {cls:'orange', pill:'Presque', dot:'orange'};
    return {cls:'red', pill:'En retard', dot:'red'};
  }

  function renderInsights(stats){
    // last post
    $("#lastPost").textContent = stats.lastTs ? formatDate(stats.lastTs) : "Pas encore";
    $("#streak").textContent = String(stats.streak);

    const monthTotal = stats.daily.reduce((a,b)=>a+b,0);
    const target = Number($("#monthlyTarget").value || state.settings.monthlyTarget || 20);
    const remain = Math.max(0, target - monthTotal);
    $("#toGoal").textContent = remain===0 ? "Objectif atteint ✅" : `${remain} post(s) restant(s) ce mois-ci`;

    // meilleurs créneaux (top 2)
    const wNames = ["Dim","Lun","Mar","Mer","Jeu","Ven","Sam"];
    const topW = [...stats.wday.map((v,i)=>({i,v}))].sort((a,b)=>b.v-a.v).slice(0,2).map(o=>wNames[o.i]).join(", ");
    const topH = [...stats.hour.map((v,i)=>({i,v}))].sort((a,b)=>b.v-a.v).slice(0,2).map(o=>`${String(o.i).padStart(2,'0')}h`).join(", ");
    $("#bestSlots").textContent = (stats.wday.some(v=>v>0) ? `${topW} @ ${topH}` : "Pas assez de données");

    // Conseil
    const now = new Date();
    const msg = (remain>0)
      ? `Tu dois publier ~${Math.ceil(remain / Math.max(1, (new Date(now.getFullYear(), now.getMonth()+1, 0).getDate() - now.getDate()+1)/2 ))}x par jour pour rattraper.`
      : "Tu es large, pense à préparer du contenu d'avance ✅";
    $("#advice").textContent = msg;
  }

  function renderCharts(stats){
    const ctxR = $("#ringChart");
    const ctxM = $("#monthBar");
    const ctxY = $("#yearBar");

    const monthTotal = stats.daily.reduce((a,b)=>a+b,0);
    const target = Number($("#monthlyTarget").value || state.settings.monthlyTarget || 20);
    const progress = Math.min(1, monthTotal / Math.max(1,target));
    const col = colorForProgress(progress);

    // Header pill
    const pill = $("#statusPill");
    pill.className = "pill " + (col.cls || "");
    $("#pillText").textContent = col.pill;

    // Ring Donut
    if(state.charts.ring) state.charts.ring.destroy();
    state.charts.ring = new Chart(ctxR, {
      type:'doughnut',
      data:{
        labels:["Fait","Reste"],
        datasets:[{
          data:[monthTotal, Math.max(0, target - monthTotal)],
          borderWidth:0,
          hoverOffset:2,
          cutout:"68%",
          backgroundColor:[
            progress>=1 ? "#19e28a" : (progress>=0.75 ? "#ffb020" : "#ff4d6d"),
            "rgba(255,255,255,0.08)"
          ]
        }]
      },
      options:{
        plugins:{legend:{display:false}, tooltip:{enabled:true}},
        responsive:true,
        animation:{duration:500}
      }
    });
    $("#ringText").innerHTML = `<b>${monthTotal}/${target}</b> ce mois-ci`;

    // Month bar (jours)
    const d = new Date();
    const labelsM = Array.from({length: stats.daysInMonth}, (_,i)=> String(i+1));
    if(state.charts.monthBar) state.charts.monthBar.destroy();
    state.charts.monthBar = new Chart(ctxM, {
      type:'bar',
      data:{
        labels: labelsM,
        datasets:[{
          label: `${d.toLocaleString('fr-FR',{month:'long'})} ${d.getFullYear()}`,
          data: stats.daily,
          borderWidth:0,
          backgroundColor: labelsM.map(()=> "rgba(124,243,255,0.35)")
        }]
      },
      options:{
        scales:{
          x:{ grid:{display:false}, ticks:{maxRotation:0,minRotation:0, autoSkip:true, maxTicksLimit:7} },
          y:{ beginAtZero:true, grid:{color:"rgba(255,255,255,0.06)"} }
        },
        plugins:{legend:{display:false}},
        responsive:true
      }
    });

    // Year bar (mois)
    const labelsY = ["Jan","Fév","Mar","Avr","Mai","Juin","Juil","Aoû","Sep","Oct","Nov","Déc"];
    if(state.charts.yearBar) state.charts.yearBar.destroy();
    state.charts.yearBar = new Chart(ctxY, {
      type:'bar',
      data:{
        labels: labelsY,
        datasets:[{
          label: `Publications ${d.getFullYear()}`,
          data: stats.monthly,
          backgroundColor: labelsY.map(()=> "rgba(124,243,255,0.35)")
        }]
      },
      options:{
        scales:{
          x:{ grid:{display:false}},
          y:{ beginAtZero:true, grid:{color:"rgba(255,255,255,0.06)"} }
        },
        plugins:{legend:{display:false}},
        responsive:true
      }
    });

    // Labels
    $("#monthLabel").textContent = d.toLocaleString('fr-FR',{month:'long', year:'numeric'});
    $("#yearLabel").textContent = d.getFullYear();
  }

  // --------- REMINDERS / NOTIFS ----------
  function renderDaysPicker(){
    const wrap = $("#days"); wrap.innerHTML="";
    const names = ["Dim","Lun","Mar","Mer","Jeu","Ven","Sam"];
    names.forEach((n,i)=>{
      const b = document.createElement("button");
      b.type="button"; b.className="day"+(state.settings.reminderDays.includes(i)?" active":"");
      b.textContent = n;
      b.onclick = ()=>{
        const idx = state.settings.reminderDays.indexOf(i);
        if(idx>=0) state.settings.reminderDays.splice(idx,1);
        else state.settings.reminderDays.push(i);
        save(); renderDaysPicker();
      };
      wrap.appendChild(b);
    });
  }

  function notifStatus(){
    let perm = Notification?.permission || "denied";
    $("#notifState").textContent = "Permission: " + perm;
  }

  function scheduleTicker(){
    // vérifie chaque minute si on doit notifier
    setInterval(()=>{
      const now = new Date();
      const hh = String(now.getHours()).padStart(2,"0");
      const mm = String(now.getMinutes()).padStart(2,"0");
      const hitTime = `${hh}:${mm}` === state.settings.reminderTime;
      const hitDay = state.settings.reminderDays.includes(now.getDay());
      // éviter double notifs: tag par jour
      const key = "postit_last_notif_day";
      const todayKey = now.toISOString().slice(0,10);
      const last = localStorage.getItem(key);
      if(hitTime && hitDay && last !== todayKey){
        if(Notification && Notification.permission==="granted"){
          new Notification("POSTIT 🔔", { body:"Petit rappel: poste ou log ta vidéo d’aujourd’hui 💪" });
        }
        toast("Rappel: pense à poster aujourd’hui !");
        localStorage.setItem(key, todayKey);
      }
    }, 60000);
  }

  // --------------- UI HOOKS ---------------
  function bindUI(){
    $("#datetime").value = todayLocalISO();
    $("#monthlyTarget").value = state.settings.monthlyTarget || 20;
    $("#reminderTime").value = state.settings.reminderTime || "19:00";
    notifStatus();
    renderDaysPicker();

    $("#btnNotif").onclick = async ()=>{
      if(!("Notification" in window)) { toast("Notifications non supportées"); return; }
      const perm = await Notification.requestPermission();
      state.settings.notifGranted = (perm==="granted"); save(); notifStatus();
      if(perm==="granted") toast("Notifications autorisées ✅");
      else toast("Notifications refusées");
    };

    $("#btnSaveReminder").onclick = ()=>{
      state.settings.reminderTime = $("#reminderTime").value || "19:00";
      save(); toast("Rappel enregistré");
    };

    $("#btnAdd").onclick = ()=>{
      const platform = $("#platform").value.trim();
      const dt = $("#datetime").value;
      const title = $("#title").value.trim();
      const ts = new Date(dt).getTime();
      if(!ts || isNaN(ts)) { toast("Date invalide"); return; }
      state.posts.push({ts, platform, title});
      // tri par date
      state.posts.sort((a,b)=>a.ts-b.ts);
      const tgt = Number($("#monthlyTarget").value);
      if(tgt>0) state.settings.monthlyTarget = tgt;
      save();
      $("#title").value="";
      $("#datetime").value = todayLocalISO();
      toast("Publication enregistrée ✅");
      const stats = computeStats();
      renderCharts(stats);
      renderInsights(stats);
    };

    $("#btnExport").onclick = ()=>{
      const blob = new Blob([JSON.stringify({posts:state.posts,settings:state.settings},null,2)], {type:"application/json"});
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url; a.download = "postit_data.json"; a.click();
      URL.revokeObjectURL(url);
    };

    $("#importFile").onchange = (e)=>{
      const f = e.target.files?.[0]; if(!f) return;
      const r = new FileReader();
      r.onload = ()=>{
        try{
          const d = JSON.parse(r.result);
          if(Array.isArray(d.posts)) state.posts = d.posts;
          if(d.settings) state.settings = Object.assign(state.settings, d.settings);
          save(); toast("Import OK ✅");
          $("#monthlyTarget").value = state.settings.monthlyTarget || 20;
          $("#reminderTime").value = state.settings.reminderTime || "19:00";
          const stats = computeStats(); renderCharts(stats); renderInsights(stats); renderDaysPicker(); notifStatus();
        }catch(e){ toast("Import invalide"); }
      };
      r.readAsText(f);
    };
  }

  // --------------- INIT -------------------
  (async function init(){
    load();
    await loadGiphyBG();
    bindUI();
    const stats = computeStats();
    renderCharts(stats);
    renderInsights(stats);
    scheduleTicker();
  })();
  </script>
</body>
</html>
